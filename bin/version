#!/usr/bin/env bash

USAGE=`cat <<EOF
Version a sub-package in the project and publish it as a docker image

Usage: version <pkg> <version>

Arguments
  pkg - the folder of the package to be version
  version - the "npm version" command to send, e.g. major|minor|patch
EOF
`

# Get variables from cli args
PKG=$1
VERSION=$2

# Check they passed a PKG
if [ -z "$PKG" ]
then
  echo "ERROR: <pkg> is required"
  echo "$USAGE"
  exit 1
fi

if [ -z "$VERSION" ]
then
  echo "ERROR: <version> is required"
  echo "$USAGE"
  exit 1
fi

if [ ! -f "$PKG/package.json" ]
then
  echo "ERROR: Invalid package"
  echo "$USAGE"
  exit 1
fi

which jq &> /dev/null
if [ $? -ne 0 ]
then
  echo "dependency jq not found"
  exit 1
fi

set -e

cd $PKG

if [ ! -f deploybot.env ]
then
  echo "deploybot.env not setup, see README.md"
  exit 1
fi

source deploybot.env

# Perform the versioning
[ $VERSION != "rebuild" ] && npm version $VERSION
NEW_VERSION=v`cat package.json | jq -r .version`

# Commit and tag the release
if [ $VERSION != "rebuild" ]
then
  git add package*.json
  git commit -m "$PKG-$NEW_VERSION"
  git tag "$PKG-$NEW_VERSION"
fi

# Work out the endpoint to deploy to
ENDPOINT="$DEPLOYBOT_URL/build/smartish-mirror-$PKG/$NEW_VERSION?platforms=armv7"

# Tar the local directory and post it to deploybot
tar -cz --exclude '*.env' --exclude 'node_modules' --exclude '.dashund' * \
  | curl --data-binary @- \
    -X POST \
    --header "Authorization: Bearer $DEPLOYBOT_AUTH" \
    --header "Content-Type: application/gzip" \
     $ENDPOINT
